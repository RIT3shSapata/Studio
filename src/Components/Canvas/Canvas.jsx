import React, { useEffect, useRef } from 'react';

//to prevent fuzzy rendering
const getPixelRatio = (context) => {
    var backingStore =
        context.backingStorePixelRatio ||
        context.webkitBackingStorePixelRatio ||
        context.mozBackingStorePixelRatio ||
        context.msBackingStorePixelRatio ||
        context.oBackingStorePixelRatio ||
        context.backingStorePixelRatio ||
        1;

    return (window.devicePixelRatio || 1) / backingStore;
};
const Canvas = () => {
    const canvasRef = useRef(null);
    const renderOnce = useRef(false);
    //to store the id generated by requestAnimationFrame
    const requestIDRef = useRef(null);
    const i = useRef(0);
    const j = useRef(0);

    useEffect(() => {
        if (renderOnce.current) return;
        const canvas = canvasRef.current;
        const context = canvas.getContext('2d');

        //to prevent fuzzy rendering
        let ratio = getPixelRatio(context);
        let width = getComputedStyle(canvas)
            .getPropertyValue('width')
            .slice(0, -2);
        let height = getComputedStyle(canvas)
            .getPropertyValue('height')
            .slice(0, -2);

        canvas.width = width * ratio;
        canvas.height = height * ratio;
        canvas.style.width = `${width}px`;
        canvas.style.height = `${height}px`;

        i.current = canvas.width / 5;
        j.current = canvas.height / 5;

        const render = () => {
            requestIDRef.current = requestAnimationFrame(render);
            console.log('render');
            context.clearRect(0, 0, canvas.width, canvas.height);
            context.beginPath();
            context.arc(
                i.current,
                j.current,
                canvas.width / 20,
                0,
                2 * Math.PI
            );
            context.fill();
            // i.current = i.current + 10;
        };
        render();

        return () => {
            cancelAnimationFrame(requestIDRef.current);
        };
    }, []);

    const handleDown = () => {
        console.log('down');
        j.current = j.current + 100;
    };
    const handleUp = () => {
        console.log('down');
        j.current = j.current - 100;
    };
    const handleLeft = () => {
        console.log('down');
        i.current = i.current - 100;
    };
    const handleRight = () => {
        console.log('down');
        i.current = i.current + 100;
    };

    return (
        <div className="p-5 flex justify-around">
            <canvas
                ref={canvasRef}
                className="w-3/4 h-1/2 border-8 border-slate-900"
                id="canvas"></canvas>
            <div className="flex flex-col">
                <button onClick={handleDown}>Move down</button>
                <button onClick={handleUp}>Move up</button>
                <button onClick={handleLeft}>Move left</button>
                <button onClick={handleRight}>Move right</button>
            </div>
        </div>
    );
};

export default Canvas;
